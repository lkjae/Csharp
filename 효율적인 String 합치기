▶  내부 동작
▷ string + string : 
C#이나 Java에서 string은 값타입이 아닌 참조타입이다. + 기호를 사용하여 문자열을 조합할 때 마다 새로운 string 객체가 생성이 되고 이전의 문자열 객체는 GC(가비지 컬렉터)의 수거 대상이 된다.
+ 연산 한 번당 메모리를 하나씩 먹는다는 소리인데 반복문으로 + 연산을 1000번 한다고 치면 1000개의 string 객체 메모리가 낭비되는 셈이다.
 
즉, 많은 + 연산을 실행할 수록 메모리가 낭비되고 이로 인해서 가비지 컬렉션이 자주 발생하게 되어 성능 저하를 유발할 수 있다.
 
▷ StringBuilder.Append(string) : 
StringBuilder는 문자열을 생성을 도와주는 클래스로 Append 함수를 이용해서 문자열을 이어붙일 수 있다.
+ 연산과 다른점은 문자열을 조합할 때 새로운 string 객체를 생성하지 않아 메모리 누수가 되지 않는다는 것이다.
 
▶  적용
▷ string + string : 문자열 수정 작업이 적게 일어나거나 자주 수행하지 않는 로직에서 사용할 때 적합하다.
▷ StringBuilder.Append(string) : 문자열 수정 작업이 많이 일어나거나 빈번하게 수행될 때, 
                                  혹은 수정 작업의 횟수를 프로그램 설계 단계에서 알 수 없을 때 사용하는 것이 적합하다.            
               
                  
                    
                    
출처: https://spiralmoon.tistory.com/entry/C-string-string-과-StringBuilderAppend-차이 [Spiral Moon's programming blog:티스토리]
